/**
 * GPII snapshot Handler
 *
 * Copyright 2014 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */
"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.defaults("gpii.flowManager.capture", {
    gradeNames: ["fluid.component"],
    events: {
        onPrepareCapture: null,
        onPrepareSolutions: null,
        onSolutions: null,
        onReadyToCapture: {
            events: {
                prepareCapture: "onPrepareCapture",
                prepareSolutions: "onPrepareSolutions",
                solutions: "onSolutions"
            },
            args: [
                "{arguments}.solutions.0",
                "{arguments}.prepareCapture.0"
            ]
        },
        onError: null,

        // Newer versions below using fireTransformEvent
        onSolutionsForCurrentDevice: null,
        onCaptureSettingsForCurrentDevice: null
    },
    listeners: {
        onSolutionsForCurrentDevice: [
            {
                funcName: "gpii.lifecycleManager.getDeviceContextPromise",
                args: ["{flowManager}.deviceReporterDataSource"]
            },
            {
                funcName: "gpii.flowManager.getSolutionsPromise",
                args: [ "{flowManager}.solutionsRegistryDataSource", "{arguments}.0"]
            }
        ],
        onCaptureSettingsForCurrentDevice: [
            {
                funcName: "gpii.lifecycleManager.getDeviceContextPromise",
                args: ["{flowManager}.deviceReporterDataSource"]
            },
            {
                funcName: "gpii.flowManager.getSolutionsPromise",
                args: [ "{flowManager}.solutionsRegistryDataSource", "{arguments}.0"]
            },
            {
                func: "{that}.captureSystemSettingsPromise",
                args: ["{arguments}.0", "{arguments}.1"]
            }
        ],


        "onPrepareCapture.deviceContext": {
            funcName: "gpii.lifecycleManager.getDeviceContext",
            args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onPrepareSolutions"]
        },
        onPrepareSolutions: {
            func: "{that}.getSolutions",
            args: ["{arguments}.0"]
        },
        onReadyToCapture: {
            func: "{that}.captureSystemSettings",
            args: ["{arguments}.0", "{arguments}.1"]
        },
        onError: {
            funcName: "console.log",
            args: ["{arguments}.0"]
        }
    },
    invokers: {
        getSolutions: {
            funcName: "gpii.flowManager.getSolutions",
            args: [ "{flowManager}.solutionsRegistryDataSource", "{arguments}.0", "{that}.events.onSolutions", "{that}.events.onError"] //"{request}.events.onError"]
        },
        captureSystemSettings: {
            funcName: "gpii.flowManager.captureSystemSettings",
            args: ["{lifecycleManager}.invokeSettingsHandlerGet", "{lifecycleManager}.variableResolver", "{arguments}.0", "{arguments}.1"]
        },

        getInstalledSolutions: {
            funcName: "gpii.flowManager.getInstalledSolutions",
            args: ["{that}"]
        },
        getSystemSettingsCapture: {
            funcName: "gpii.flowManager.getSystemSettingsCapture",
            args: ["{that}", "{arguments}.0"] // Options
        },
        captureSystemSettingsPromise: {
            funcName: "gpii.flowManager.captureSystemSettings",
            args: ["{lifecycleManager}.invokeSettingsHandlerGet", "{lifecycleManager}.variableResolver",
                "{arguments}.0", "{arguments}.1"]
        }
    }
});


gpii.flowManager.getInstalledSolutions = function (that) {
    return fluid.promise.fireTransformEvent(that.events.onSolutionsForCurrentDevice);
};

/**
 * Options: solutionsList - Optional list of solutions to filter by
 */
gpii.flowManager.getSystemSettingsCapture = function (that, options) {
    return fluid.promise.fireTransformEvent(that.events.onCaptureSettingsForCurrentDevice,
        {}, options);
};

/**
 * Runs through all the solutions currently available on the system, pulls the current
 * setting for each supportedSetting and returns them in an object. Primary use case
 * is for backing Capture tools that would allow a user to set up their GPII profile
 * starting with the current settings for their applications on the local machine.
 *
 * @param {lifecycleManager.variableResolver} resolver - Resolver for looking up handler specifications
 * @param {Object} solutions - Solutions registry entries for solutions available on the current machine.
 * @param {event} event - Event to call with the payload as an argument after processing.
 * @return Returns nothing. Results are fired as an argument to the `event` argument.
 */
gpii.flowManager.captureSystemSettings = function (invokeSettingsHandlerGet, resolver, solutions, options) {
    var promiseTogo = fluid.promise();

    var handlerGetPromises = [];

    var safeHandlerGet = function (invokeSettingsHandlerGet, solutionID, handlerSpec) {
        var promiseTogo = fluid.promise();
        try {
            invokeSettingsHandlerGet(solutionID, handlerSpec).then(function (data) {
                promiseTogo.resolve(data);
            }, function (err) {
                console.log("Error issuging invokeSettingsHandlerGET: ", err);
                promiseTogo.resolve({});
            });
        }
        catch (error) {
            console.log("Very bad error: ", error);
            promiseTogo.resolve({});
        }
        return promiseTogo;
    };

    var solutionsToFetch = solutions;
    if (options.solutionsList) {
        solutionsToFetch = {};
        fluid.each(solutions, function (solution, solutionID) {
            if (options.solutionsList.indexOf(solutionID) >= 0) {
                solutionsToFetch[solutionID] = solution;
            }
        });
    }
    fluid.each(solutionsToFetch, function (solution, solutionID) {
        var newSolution = gpii.lifecycleManager.transformSolutionSettings(solution, gpii.settingsHandlers.changesToSettings);
        fluid.each(newSolution.settingsHandlers, function (handlerSpec) {
            //if applicationSettings is unspecified, dont attempt to get settings
            if (!handlerSpec.supportedSettings) {
                return;
            }
            if (handlerSpec.capabilitiesTransformations) {
                fluid.each(handlerSpec.capabilitiesTransformations, function (capabilitiesTransformation, setting) {
                    if(handlerSpec.supportedSettings[setting] && handlerSpec.supportedSettings[setting].schema) {
                        handlerSpec.supportedSettings[setting].schema.path = capabilitiesTransformation.path;
                    }
                });
            }
            handlerSpec.settings = handlerSpec.supportedSettings;
            handlerSpec = resolver.resolve(handlerSpec, {});
            // handlerGetPromises.push(invokeSettingsHandlerGet(solutionID, handlerSpec));
            handlerGetPromises.push(safeHandlerGet(invokeSettingsHandlerGet, solutionID, handlerSpec));
        });
    });
    var promisesSequence = fluid.promise.sequence(handlerGetPromises);
    promisesSequence.then(function (responses) {
        // TODO Assemble a better looking payload to send back once we finish
        // working through the Windows SPI Settings Handler Issues
        promiseTogo.resolve(responses);
    }, function (responses) {
        promiseTogo.resolve(responses);
    });

    return promiseTogo;
};
